@startuml
!pragma Layout smetana

    class Main {
    - {static} final String USER
    - {static} final String PASSWORD
    - {static} final String URL
    - {static} final String DB
    - {static} final ConnectionPool connectionPool
    }

package "Entities" {
    class Topping {
    - String toppingName
    - int toppingId
    - float toppingPrice
    }

    class Bottom {
    - String bottomName
    - int bottomId
    - float bottomPrice
    }

    class User {
    - int id
    - String email
    - String password
    - int balance
    - boolean isAdmin
    }

    class ProductLine {
    - int orderLineId
    - int quantity
    - float totalPrice
    - String bottomName
    - float bottomPrice
    - String toppingName
    - float toppingPrice
    - int bottomId
    - int toppingId
    }

    class Order {
    - int orderId
    - int userId
    - String userEmail
    - List<ProductLine> productLineList
    - float orderPrice
    - boolean isPaid
    }
}


package "Persistence" {
    class OrderMapper {
    + {static} createOrder()
    + {static} getOrdersByUser()
    + {static} getAllOrders()
    + {static} getOrderById()
    + {static} updateOrder()
    + {static} deleteOrder()
    + {static} getProductLineByOrderId()
    + {static} setOrderStatus()
    }
class UserMapper {
    + {static} login()
    + {static} getBalanceByUserId()
    + {static} pay()
    + {static} createUser()
    + {static} getAllUsers()
    + {static} updateBalance()
    }

    class ConnectionPool {
        - {static} volatile ConnectionPool instance
        - {static} HikariDataSource ds
        - {static} final Logger LOGGER

        - ConnectionPool()

        + {static} getInstance()
        + getConnection()
        + close()
        + {static} createHikariConnectionPool()
        }
}


package "Controllers" {
    class UserController {
    + {static} addRoutes()
    + {static} login()
    + {static} createUser()
    + {static} getAllUsers()
    + {static} logout()
    }

    class OrderController {
    + {static} addRoutes()
    + {static} createOrder()
    + {static} getAllBottomsAndToppings()
    + {static} getOrdersByUser()
    + {static} getAllOrders()
    + {static} getOrderById()
    + {static} deleteOrder()
    + {static} viewHistory()
    + {static} payOrder()
    + {static} adminView()
    }
}
package "Config" {
    class SessionConfig {
     + {static} sessionConfig()
     }
    class ThymeleafConfig{
    + {static} templateEngine()
    }
}

package "Exceptions" {
     class DatabaseException {
     + DatabaseException ()
      }
}

'Entitet relationer
Order *-- User: "En ordre skal tilhÃ¸re en user"
Order o-- ProductLine: "En ordre kan eksistere uden produktlinjer"
ProductLine *-- Topping: "En produktlinje skal have en topping"
ProductLine *-- Bottom: "En produktlinje skal have en bottom"

Main -- "Controllers"
Main -- "Config"
"Persistence" -- "Entities": Laver Entities objekter
"Controllers" -- "Persistence": Bruger Mapper-klasser
"Persistence" -- "Exceptions": Kaster DB exceptions



@enduml
implements ..|>
extends <|-- (is-a)
composition *-- (must-have)
Aggregation o-- (can-have)
Associering <--