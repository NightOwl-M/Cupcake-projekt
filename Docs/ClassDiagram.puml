@startuml
!pragma Layout smetana

    class Main {
    }

package "Entities" {
    class Cupcake {
    - Bottom bottom
    - Topping topping
    + getters();
    + getPrice();
    }

    class Topping {
    - String toppingName
    - int toppingId
    - float toppingPrice
    + getToppingName();
    + getToppingPrice();
    }

    class Bottom {
    - String bottomName
    - int bottomId
    - float bottomPrice
    + getBottomName();
    + getBottomPrice();
    }

    class User {
    - int userId
    - String email
    - String password
    - int balance
    - boolean isAdmin
    + getters();
    + setters();
    }
    class ProductLine {
    - int orderLineId
    - int quantity
    - float totalPrice
    - String bottomName
    - float bottomPrice
    - String toppingName
    - float toppingPrice
    + getters();
    }

    class Orders {
    - int orderId
    - int userId
    - List<ProductLine> productLineList
    - float orderPrice
    - boolean isPaid
    + getters();
    + setters();
    }
}
Cupcake *-- Topping
Cupcake *-- Bottom

package "Persistence" {
    class orderMapper {
    + createOrder();
    + getOrdersByUser();
    + getAllOrders();
    + getOrderById();
    + updateOrder();
    + deleteOrder();
    + getProductLineByOrderId();
    + setOrderStatus();
    }
class userMapper {
    + login();
    + getBalanceByUserId();
    + pay();
    + createUser();
    + getAllUsers();
    + updateBalance();
    }
}
Orders *-- ProductLine
Orders *-- User
ProductLine *-- Cupcake

package "Controllers" {
    class UserController {
    + addRoutes();
    + login();
    + createUser();
    + getAllUsers();
    }

    class OrderController {
    + addRoutes();
    + createOrder();
    + getPriceById();
    + addProductLine();
    + getOrdersByUser();
    + getAllOrders();
    + getOrderById();
    + deleteOrder();
    + viewHistory();
    + payOrder();
    }
}
package "Test" {
    class Test {
    }
}
Main -- UserController
Main -- OrderController
UserController -- userMapper
OrderController -- orderMapper

@enduml
implements ..|>
extends <|-- (is-a)
composition *-- (must-have)
Aggregation o-- (can-have)
Associering <--